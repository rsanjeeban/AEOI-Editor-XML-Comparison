@page "/compare"
@inject NavigationManager NavigationManager
@using System.IO
@using AEOI.Editor.Web.Shared.Models
@inject IJSRuntime JS
@inject HttpClient HttpClient


<br/>

@foreach (var item in FileDetails)
{
    <div class="mt-sm">
        <TelerikCheckBox @bind-Value="@item.isSelected">
        @*ValueChanged="@((bool value) => ValueChanged(value))">*@
        </TelerikCheckBox>
        <label>
            @item.fileName
        </label>
    </div>
}
<br />
<TelerikButton OnClick="@onExportPdf">PDF</TelerikButton>
<TelerikButton OnClick="@onExportExcel">Excel</TelerikButton>



@code {
    // One way to define relative paths is to put the desired URL here.
    // This can be a full URL such as https://mydomain/myendpoint/save
    public string SavePdfUrl => ToAbsoluteUrl("api/comparison/compare?export=pdf");
    public string SaveExcelUrl => ToAbsoluteUrl("api/comparison/compare?export=excel");
    public string RemoveUrl => ToAbsoluteUrl("api/comparison/remove");

    private FileDetail[] FileDetails;

    public string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }

    async Task OnSuccessHandler(UploadSuccessEventArgs e)
    {  
        //await JS.InvokeVoidAsync("triggerFileDownload", "Report",e.Request.ResponseText);
    }

     async Task downloadFile(String url)
    {  
        await JS.InvokeVoidAsync("triggerFileDownload", "Report",url);
    }

    protected override async Task OnInitializedAsync()
    {
        FileDetails = await HttpClient.GetFromJsonAsync<FileDetail[]>("api/upload/getfilenames");
    }

    async Task onExportPdf()
    {
        var response = await HttpClient.PostAsJsonAsync("api/comparison/ExportFile?export=pdf",FileDetails.Where(item=>item.isSelected).Select(item => item.fileName));
        var content = await response.Content.ReadAsStringAsync();
        await downloadFile(content );
    }
    async Task onExportExcel()
    {
        var response = await HttpClient.PostAsJsonAsync("api/comparison/ExportFile?export=excel",FileDetails.Where(item=>item.isSelected).Select(item => item.fileName));
        var content = await response.Content.ReadAsStringAsync();
        await downloadFile(content);
    }

}